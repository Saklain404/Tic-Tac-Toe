{"version":3,"sources":["Components/Icons.js","App.js","reportWebVitals.js","index.js"],"names":["Icons","name","className","itemArray","Array","fill","App","useState","isCross","setIsCross","winMessage","setWinMessage","Reload","ChangeItem","itemNumber","toast","type","Container","position","Row","Col","md","Button","color","block","onClick","map","item","index","Card","CardBody","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b98bed9a.chunk.js","sourcesContent":["import React from 'react'\nimport {FaPen, FaTimes, FaRegCircle} from 'react-icons/fa'\n\nconst Icons =({name}) => {\n        switch (name) {\n            case \"circle\": \n\n              return <FaRegCircle className=\"icon\"/>\n\n            case \"cross\":\n\n            return <FaTimes className=\"icon\"/>\n\n            default : \n               return <FaPen className=\"icon\"/>\n        }\n}\n\n\nexport default Icons\n","import React, { useState } from \"react\";\nimport { Container, Row, Col, Card, CardBody, Button } from \"reactstrap\";\nimport Icons from \"./Components/Icons\";\n\nimport { ToastContainer, toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\n\nconst itemArray = new Array(9).fill(\"empty\");\n\nconst App = () => {\n  const [isCross, setIsCross] = useState(false);\n  const [winMessage, setWinMessage] = useState(\"\");\n\n  const Reload = () => {\n    setIsCross(false);\n    setWinMessage(\"\");\n    itemArray.fill(\"empty\", 0, 9);\n  };\n\n  const CheckIsWineer = () => {\n    \n    if (\n      itemArray[0] === itemArray[1] &&\n      itemArray[0] === itemArray[2] &&\n      itemArray[0] !== \"empty\"\n    ) {\n      setWinMessage(`${itemArray[0]} won`);\n    } else if (\n      itemArray[3] !== \"empty\" &&\n      itemArray[3] === itemArray[4] &&\n      itemArray[4] === itemArray[5]\n    ) {\n      setWinMessage(`${itemArray[3]} won`);\n    } else if (\n      itemArray[6] !== \"empty\" &&\n      itemArray[6] === itemArray[7] &&\n      itemArray[7] === itemArray[8]\n    ) {\n      setWinMessage(`${itemArray[6]} won`);\n    } else if (\n      itemArray[0] !== \"empty\" &&\n      itemArray[0] === itemArray[3] &&\n      itemArray[3] === itemArray[6]\n    ) {\n      setWinMessage(`${itemArray[0]} won`);\n    } else if (\n      itemArray[1] !== \"empty\" &&\n      itemArray[1] === itemArray[4] &&\n      itemArray[4] === itemArray[7]\n    ) {\n      setWinMessage(`${itemArray[1]} won`);\n    } else if (\n      itemArray[2] !== \"empty\" &&\n      itemArray[2] === itemArray[5] &&\n      itemArray[5] === itemArray[8]\n    ) {\n      setWinMessage(`${itemArray[2]} won`);\n    } else if (\n      itemArray[0] !== \"empty\" &&\n      itemArray[0] === itemArray[4] &&\n      itemArray[4] === itemArray[8]\n    ) {\n      setWinMessage(`${itemArray[0]} won`);\n    } else if (\n      itemArray[2] !== \"empty\" &&\n      itemArray[2] === itemArray[4] &&\n      itemArray[4] === itemArray[6]\n    ) {\n      setWinMessage(`${itemArray[2]} won`);\n    }\n  };\n\n  const ChangeItem = (itemNumber) => {\n    if (winMessage) {\n      return toast(winMessage, { type: \"success\" });\n    }\n    if (itemArray[itemNumber] === \"empty\") {\n      itemArray[itemNumber] = isCross ? \"cross\" : \"circle\";\n      setIsCross(!isCross);\n    } else {\n      return toast(\"already filled\", { type: \"error\" });\n    }\n    CheckIsWineer();\n  };\n  return (\n    <Container className=\"p-5\">\n      <ToastContainer position=\"bottom-center\" />\n      <Row>\n        <Col md={6} className=\"offset-md-3\">\n          {winMessage ? (\n            <div className=\"mb-2 mt-2\">\n              <h1 className=\"text-warning text-uppercase text-center \">\n                {winMessage}\n              </h1>\n              <Button color=\"success\" block onClick={Reload}>\n                {\" \"}\n                Reload the game\n              </Button>\n            </div>\n          ) : (\n            <h1 className=\"text-center text-warning\">\n              {isCross ? \"Cross\" : \"Circle\"} Turns\n            </h1>\n            \n          )}\n          <div className=\"grid\">\n            {itemArray.map((item, index) => (\n              <Card color=\"warning\" onClick={() => ChangeItem(index)}>\n                <CardBody className=\"box\">\n                  <Icons name={item} />\n                </CardBody>\n              </Card>\n            ))}\n          </div>\n        </Col>\n      </Row>\n      <div className=\"btn mt-5\">\n        <Button block onClick={Reload} color=\"success\">\n          {\" \"}\n          Reload the game\n        </Button>\n      </div>\n    </Container>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}